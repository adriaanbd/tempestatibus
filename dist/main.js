!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){"use strict";var r=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==r)return r;throw new Error("unable to locate global object")}();e.exports=t=r.fetch,t.default=r.fetch.bind(r),t.Headers=r.Headers,t.Request=r.Request,t.Response=r.Response},function(e,t,n){"use strict";n.r(t);const r=n(0);var o={getWeather:async(e,t)=>{const n=`https://api.openweathermap.org/data/2.5/weather?q=${e}&units=${t}&appid=2478ad4cdc481a945b5ae587d1f0bf14`;try{const e=await r(n);(e=>{const{icon:t}=e.weather[0],{humidity:n,temp:r,temp_max:o,temp_min:u}=e.main,i=document.querySelector("#card"),c=document.querySelector("#icon"),a=document.querySelector("#temperature"),d=document.querySelector("#max_temp"),s=document.querySelector("#min_temp"),f=document.querySelector("#humidity");i.style.display="block",a.innerText=r,d.innerText=o,s.innerText=u,f.innerText=n,c.src=`http://openweathermap.org/img/wn/${t}@2x.png`})(await e.json())}catch(e){alert("Either the city doesn't exist or something went terribly wrong!")}}};const u=document.querySelector("form");document.addEventListener("DOMContentLoaded",()=>{u.addEventListener("submit",e=>{e.preventDefault();const t=new FormData(u),n=t.get("city"),r=t.get("unit");o.getWeather(n,r)})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,